---
service: serverless-udagram-app
frameworkVersion: '2'
custom:
  serverless-offline:
    port: 3003
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages: # Add this section of the config
      - dev
  webpack:
    webpackConfig: "./webpack.config.js"
    includeModules: true
  topicName: imagesTopic-${self:provider.stage}
  documentation:
    api:
      info:
        version: 1.0.0
        title: Serverless Udagram
        description: Serverless application
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local
provider:
  name: aws
  runtime: nodejs14.x
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    GROUPS_TABLE: Groups-${self:provider.stage}
    IMAGES_TABLE: Images-${self:provider.stage}
    IMAGE_ID_INDEX: imageIdIndex
    IMAGES_BUCKET: serverless-udagram-images-${self:provider.stage}-daniel
    SIGNED_URL_EXPIRATION: 300
    CONNECTIONS_TABLE: Connections-${self:provider.stage}
    THUMBNAILS_S3_BUCKET: serverless-udagram-thumbnail-images-${self:provider.stage}-daniel
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret
  lambdaHashingVersion: '20201221'
  stage: ${opt:stage, "dev"}
  region: us-west-2
  iamRoleStatements:
  - Effect: Allow
    Action:
    - dynamodb:Scan
    - dynamodb:PutItem
    - dynamodb:GetItem
    Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
  - Effect: Allow
    Action:
    - dynamodb:Query
    - dynamodb:PutItem
    Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
  - Effect: Allow
    Action:
    - dynamodb:Query
    Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}
  - Effect: Allow
    Action:
    - s3:PutObject
    - s3:GetObject
    Resource: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*
  - Effect: Allow
    Action:
    - dynamodb:Scan
    - dynamodb:PutItem
    - dynamodb:GetItem
    - dynamodb:DeleteItem
    Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
  - Effect: Allow
    Action:
    - s3:PutObject
    Resource: arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*
  - Effect: Allow
    Action:
    - secretsmanager:GetSecretValue
    Resource: !Ref Auth0Secret
  - Effect: Allow
    Action:
    - kms:Decrypt
    Resource: !GetAtt KMSKey.Arn
functions:
  Auth:
    handler: src/lambda/auth/authorizer.handler
  RS256Authorizer:
    handler: src/lambda/auth/rs256Authorizer.handler
  GetGroups:
    handler: src/lambda/http/getGroups.handler
    events:
    - http:
        method: get
        path: groups
        cors: true
  CreateGroup:
    handler: src/lambda/http/createGroup.handler
    events:
    - http:
        method: post
        path: groups
        cors: true
        authorizer: RS256Authorizer
        request:
          schema:
            application/json: "${file(models/create-group-request.json)}"
  GetImages:
    handler: src/lambda/http/getImages.handler
    events:
    - http:
        method: get
        path: groups/{groupId}/images
        cors: true
  GetImage:
    handler: src/lambda/http/getImage.handler
    events:
    - http:
        method: get
        path: images/{imageId}
        cors: true
  CreateImage:
    handler: src/lambda/http/createImage.handler
    events:
    - http:
        method: post
        path: group/{groupId}/image
        cors: true
        authorizer: RS256Authorizer
        request:
          schema:
            application/json: "${file(models/create-image-request.json)}"
  sendUploadNotifications:
    handler: src/lambda/s3/sendNotifications.handler
    environment:
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
  ResizeImage:
    handler: src/lambda/s3/resizeImage.handler
    environment:
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
  DisConnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
  SyncWithElasticSearch:
    handler: src/lambda/dynamoDb/elasticSearchSync.handler
    environment:
      ES_ENDPOINT: !GetAtt ImagesSearch.DomainEndpoint
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ImagesTable.StreamArn
resources:
  Resources:
    GroupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: "${self:provider.environment.GROUPS_TABLE}"
    ImagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: groupId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: imageId
          AttributeType: S
        KeySchema:
        - AttributeName: groupId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
        GlobalSecondaryIndexes:
        - IndexName: "${self:provider.environment.IMAGE_ID_INDEX}"
          KeySchema:
          - AttributeName: imageId
            KeyType: HASH
          Projection:
            ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: "${self:provider.environment.IMAGES_TABLE}"
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
        KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: "${self:provider.environment.CONNECTIONS_TABLE}"
    ImagesBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: "${self:provider.environment.IMAGES_BUCKET}"
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ImagesTopic
            # Function: !GetAtt SendUploadNotificationsLambdaFunction.Arn
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders:
            - "*"
            AllowedMethods:
            - GET
            - PUT
            - POST
            - DELETE
            - HEAD
            AllowedOrigins:
            - "*"
            MaxAge: 3000
    SendUploadNotificationsPermissions:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref SendUploadNotificationsLambdaFunction
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount: !Ref AWS::AccountId
        SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Id: MyPolicy
          Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*
        Bucket: "${self:provider.environment.IMAGES_BUCKET}"
    ImagesSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: images-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'

        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: 
                AWS: '*'
              Action: 'es:*'
              Resource: !Sub arn:aws:es:${self:provider.region}:${AWS::AccountId}:domain/images-search-${self:provider.stage}/*
              Condition:
                IpAddress: 
                  aws:SourceIp: ['41.217.100.67']
            - Effect: Allow
              Principal:
                AWS: !Sub arn:aws:sts::${AWS::AccountId}:assumed-role/serverless-udagram-app-dev-${self:provider.region}-lambdaRole/serverless-udagram-app-${self:provider.stage}-SyncWithElasticSearch
              Action: 'es:*'
              Resource: !Sub arn:aws:es:${self:provider.region}:${AWS::AccountId}:domain/images-search-${self:provider.stage}/*
    ImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic
        TopicName: ${self:custom.topicName}
    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ImagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}
        Topics:
          - !Ref ImagesTopic
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: "2012-10-17"
          Id: key-default-1
          Statement:
            - Sid: Allow administration of keys
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - !Ref AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'
    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-${self:provider.stage}
        TargetKeyId: !Ref KMSKey
    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 RS256 certificate
        KmsKeyId: !Ref KMSKey
